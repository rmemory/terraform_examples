---
# $ ansible-playbook --syntax-check -e"passed_in_hosts=localhost" ansible_templates/install_worker.yaml 
# $ echo $?
- hosts: "{{ passed_in_hosts }}"
  become: yes
  remote_user: ec2-user
  #become_user: root
  tasks:
    - name: Generate SSH Keypair # used to communicate with primary EC2 from worker EC2
      openssh_keypair:
        path: /home/ec2-user/.ssh/id_rsa
        type: rsa
        size: 2048
        group: ec2-user
        owner: ec2-user
    
    - name: Add worker's own public key to it's authorized_keys file
      shell: "cat /home/ec2-user/.ssh/id_rsa.pub >> /home/ec2-user/.ssh/authorized_keys && chmod 600 /home/ec2-user/.ssh/authorized_keys"

    - name: Copy over Jenkins Worker Node creation xml from terraform host to worker (as node.xml)
      vars: 
        ipv4: "{{ ansible_default_ipv4.address }}" # ip of worker via ip route
      template: # copies a Jinja template file
        src: node.j2 # Jinja template file
        dest: /home/ec2-user/node.xml
        owner: ec2-user
        mode: '0644'

    - name: Read generated private key id_rsa from worker (generated above) to copy into creds.xml
      slurp: # Copies file as a base64 encoded blob
        src: /home/ec2-user/.ssh/id_rsa
      register: pkey

    - name: Copy over creds.xml and create Jenkins credential from terraform host to worker (as creds.xml)
      vars:
        priv_key: "{{ pkey['content'] | b64decode }}"
        ipv4: "{{ ansible_default_ipv4.address }}" #only used as part of the ID for the credentials
      template:
        src: cred-privkey.j2 # Jinja template file
        dest: /home/ec2-user/creds.xml

    - name: install dependencies (wget, java 1.8, and git)
      yum:
        name: "{{ package }} "
      vars:
        package:
        - wget
        - java-1.8.0-openjdk-devel
        - git
   
    - name: Download Jenkins CLI jar file from primary to worker
      vars:
        primary: "{{ primary_ip }}"
      get_url:
        url: "http://{{ primary }}:8080/jnlpJars/jenkins-cli.jar"
        dest: /home/ec2-user/jenkins-cli.jar
        force: yes # will download even if it already exists
      register: download
      ignore_errors: yes
      until: download.status_code|default(200) == 200
      retries: 5
      delay: 5
      
    - name: Apply execute permissions to jenkins-cli.jar
      file:
        path: /home/ec2-user/jenkins-cli.jar
        owner: ec2-user
        group: ec2-user
        mode: '0777'

    - name: copy Jenkins Auth file from terraform node to worker
      copy:
        src: jenkins_auth
        dest: /home/ec2-user/
        owner: ec2-user
        mode: '0600'

    # https://stackoverflow.com/questions/42683324/create-jenkins-jlnp-slave-programmatically
    # http://www.scmgalaxy.com/tutorials/complete-guide-to-use-jenkins-cli-command-line/
    # https://www.jenkins.io/doc/book/managing/cli/
    - name: Create Jenkins Credentials for worker on primary
      vars:
        primary: "{{ primary_ip }}"
      shell: "cat /home/ec2-user/creds.xml | java -jar /home/ec2-user/jenkins-cli.jar -auth @/home/ec2-user/jenkins_auth -s http://{{primary}}:8080 create-credentials-by-xml system::system::jenkins _"

    - name: Register worker node with primary
      vars:
        primary: "{{ primary_ip }}"
      shell: 'cat /home/ec2-user/node.xml | java -jar /home/ec2-user/jenkins-cli.jar -auth @/home/ec2-user/jenkins_auth -s http://{{primary}}:8080 create-node'